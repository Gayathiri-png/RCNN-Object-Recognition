# -*- coding: utf-8 -*-
"""Recurrent Convolutional Layer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_JA30aDzzaSw_EoBCyXpKWQTfAnU3WTi
"""

import torch 
from torch.nn import DataParallel
import torchvision.transforms as transforms
import torch.optim as optim
import torch.nn as nn
import torch.nn.functional as F

#Recurrent Convolutional Layer 
class RCL(nn.Module):
    def __init__(self, fmaps, steps = 4):
        super(RCL, self).__init__()
        self.conv = nn.Conv2d(fmaps, fmaps, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn = nn.ModuleList([nn.BatchNorm2d(fmaps) for i in range(steps)])
        self.relu = nn.ReLU(inplace=True)
        self.steps = steps

        self.conv2 = nn.Conv2d(fmaps, fmaps, kernel_size=3, stride=1, padding=1, bias=False)

    def forward(self, x):
        rx = x
        for i in range(self.steps):
            if i == 0:
                z = self.conv(x)
            else:
                z = self.conv(x) + self.conv2(rx)
            x = self.relu(z)
            x = self.bn[i](x)
        return x