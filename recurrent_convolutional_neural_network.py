# -*- coding: utf-8 -*-
"""Recurrent Convolutional Neural Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u77PvA2Ja8mlFitX9xKG0kcjBiMb5X4f
"""

import torch 
from torch.nn import DataParallel
import torchvision.transforms as transforms
import torch.optim as optim
import torch.nn as nn
import torch.nn.functional as F

#Recurrent Convolutional Neural Network model
class RCNN(nn.Module):
    def __init__(self, channels, num_classes, K = 96, steps = 4):
        super(RCNN, self).__init__()
        self.K = K

        self.l1 = nn.Conv2d(channels, K, kernel_size = 5, padding = 1)
        self.relu = nn.ReLU(inplace=True)
        self.bn = nn.BatchNorm2d(K)
        self.pool1 = nn.MaxPool2d(kernel_size = 3, stride = 2, padding = 1)
        self.pool2 = nn.MaxPool2d(kernel_size = 3, stride = 2, padding = 1)
        self.l2 = RCL(K, steps=steps)
        self.l3 = RCL(K, steps=steps)
        self.l4 = RCL(K, steps=steps)
        self.l5 = RCL(K, steps=steps)
        self.fc = nn.Linear(K, num_classes, bias = True)
        self.dropout = nn.Dropout(p=0.5)
        self.dropout2 = nn.Dropout2d(p=0.25)
       
        
    def forward(self, x):
        x = self.l1(x)
        x = self.bn(self.relu(x))
        x = self.pool1(x)      
        x = self.l2(x)
        x = self.dropout2(x)
        x = self.l3(x)
        x = self.pool2(x)
        x = self.dropout2(x)
        x = self.l4(x)
        x = self.l5(x)
        x = F.max_pool2d(x, x.shape[-1])
        x = x.view(-1, self.K)
        x = self.dropout(x)
        x = self.fc(x)
        return x